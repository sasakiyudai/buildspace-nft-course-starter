{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","ethereum","window","App","useState","currentAccount","setCurrentAccount","minted","setMinted","connectToContract","a","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","updateMintedSoFar","nftContract","mintedSoFar","toNumber","checkIfWalletIsConnected","toastId","toast","loading","error","id","request","method","accounts","length","account","success","setupEventListener","connectWallet","alert","code","console","log","checkAndSwitchChain","chainToast","params","chainId","then","catch","err","on","from","tokenId","askContractToMintNft","duration","setTimeout","Infinity","makeAnEpicNFT","nftTxn","wait","hash","dismiss","useEffect","className","position","toastOptions","style","background","color","maxWidth","textAlign","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.403f2549.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\n// Constants\nconst TWITTER_HANDLE = \"__syudai__\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// eslint-disable-next-line\nconst OPENSEA_LINK = \"https://testnets.opensea.io/0xaae9a5e003d9a679078e97daf382a173f8e6c31b\";\n// eslint-disable-next-line\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x6C77fb08E3A5fd4a374E30fD8B02F3F6d270f65f\";\n\nconst { ethereum } = window;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minted, setMinted] = useState(0);\n\n  const connectToContract = async () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicNft.abi,\n      signer\n    );\n\n    return connectedContract;\n  };\n\n  const updateMintedSoFar = async () => {\n    const nftContract = await connectToContract();\n    const mintedSoFar = await nftContract.mintedSoFar();\n\n    setMinted(mintedSoFar.toNumber());\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const toastId = toast.loading(\"Checking for connected wallet...\");\n\n    if (!ethereum) {\n      toast.error(\"Make sure you have metamask!\", { id: toastId });\n      return;\n    } else {\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length === 0) {\n        toast.error(\"No account connected\", { id: toastId });\n      } else {\n        const account = accounts[0];\n        setCurrentAccount(account);\n\n        toast.success(\"Connected with \" + account, { id: toastId });\n\n        setupEventListener();\n        updateMintedSoFar();\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    const toastId = toast.loading(\"Connecting to wallet..\");\n\n    try {\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      toast.success(\"Successfully connected!\", { id: toastId });\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener();\n      updateMintedSoFar();\n    } catch (err) {\n      if (err.code === 4001) {\n        toast.error(\"User rejected the connection!\", { id: toastId });\n        return;\n      } else {\n        console.log(\"An error occured -\", err);\n        toast.error(\"An error occured while connecting!\", { id: toastId });\n        return;\n      }\n    }\n  };\n\n  const checkAndSwitchChain = async () => {\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n\n    if (chainId !== \"0x4\") {\n      const chainToast = toast.loading(\"Please connect to rinkeby...\");\n\n      await ethereum\n        .request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: \"0x4\" }],\n        })\n        .then(() => {\n          toast.success(\"Successfully connected to rinkeby!\", {\n            id: chainToast,\n          });\n          return \"success\";\n        })\n        .catch((err) => {\n          toast.error(\"Failed to connect to rinkeby!\", { id: chainToast });\n          console.error(err);\n\n          return \"failed\";\n        });\n    }\n\n    return \"already connected\";\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const res = checkAndSwitchChain();\n      if (res === \"failed\") {\n        console.log(\"error happend\");\n        return;\n      }\n\n      if (ethereum) {\n        const connectedContract = await connectToContract();\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      if (ethereum) {\n        const res = await checkAndSwitchChain();\n\n        if (res === \"failed\") {\n          return;\n        }\n\n        const toastId = toast.loading(\"setting up..\", {\n          duration: 2000,\n        });\n\n        setTimeout(\n          () =>\n            toast.loading(\"so far so good...\", {\n              id: toastId,\n              duration: 3000,\n            }),\n          1000\n        );\n\n        setTimeout(\n          () =>\n            toast.loading(\"Minting it as NFT...\", {\n              id: toastId,\n              duration: Infinity,\n            }),\n          3000\n        );\n\n        const connectedContract = await connectToContract();\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        toast.loading(\"Transaction is being mined...\", {\n          id: toastId,\n          duration: Infinity,\n        });\n        await nftTxn.wait();\n\n        toast.success(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`,\n          {\n            id: toastId,\n            duration: 3000,\n          }\n        );\n\n        setupEventListener();\n        updateMintedSoFar();\n      } else {\n        toast.error(\"Please install Metamask\");\n        return;\n      }\n    } catch (err) {\n      toast.dismiss();\n      toast.error(\"Error occured, check console\");\n\n      console.log(err);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Mint NFT\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <Toaster\n            position=\"bottom-center\"\n            toastOptions={{\n              style: {\n                background: \"black\",\n                color: \"#fff\",\n                maxWidth: \"800px\",\n                textAlign: \"left\",\n              },\n            }}\n          />\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"sub-text\">\n            {minted}/{TOTAL_MINT_COUNT}\n          </p>\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n          <hr></hr>\n          <a\n            className=\"footer-text\"\n            href={OPENSEA_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`🌊 View Collection on OpenSea`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}