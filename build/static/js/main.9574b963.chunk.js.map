{"version":3,"sources":["App.js","index.js"],"names":["CONTRACT_ADDRESS","ethereum","window","App","useState","currentAccount","setCurrentAccount","totalSupply","setTotalSupply","youMinted","setYouMinted","msgValue","setMsgValue","inputRef","useRef","inputError","setInputError","connectToContract","a","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","updateTotalSupply","mintedSoFar","toNumber","updateYouMinted","account","request","method","accounts","console","log","balanceOf","checkIfWalletIsConnected","toastId","toast","loading","error","id","length","success","setupEventListener","connectWallet","code","checkAndSwitchChain","chainToast","params","chainId","then","catch","err","on","from","tokenId","askContractToMintNft","dismiss","duration","Infinity","mint","value","utils","parseEther","nftTxn","wait","useEffect","className","position","toastOptions","style","background","color","maxWidth","textAlign","src","alt","TextField","onChange","e","target","current","validity","valid","label","variant","helperText","validationMessage","inputProps","inputMode","pattern","onClick","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4s5lBAaMA,EAAmB,6CAMjBC,EAAaC,OAAbD,SA+VOE,EA7VH,WAAO,IAAD,EAChB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,iBAAO,MACxB,EAAoCV,oBAAS,GAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAEMC,EAAiB,uCAAG,gCAAAC,EAAA,6DAClBC,EAAW,IAAIC,IAAOC,UAAUC,aAAarB,GAC7CsB,EAASJ,EAASK,YAClBC,EAAoB,IAAIL,IAAOM,SACnC1B,EACA2B,EAAUC,IACVL,GANsB,kBASjBE,GATiB,2CAAH,qDAYjBI,EAAiB,uCAAG,8BAAAX,EAAA,sEACQD,IADR,cAClBQ,EADkB,gBAEEA,EAAkBlB,cAFpB,OAElBuB,EAFkB,OAIxBtB,EAAesB,EAAYC,YAJH,2CAAH,qDAOjBC,EAAe,uCAAG,kCAAAd,EAAA,yDAClBe,EAAU,GACS,KAAnB5B,EAFkB,qBAGhBJ,EAHgB,gCAIKA,EAASiC,QAAQ,CAAEC,OAAQ,iBAJhC,OAIZC,EAJY,OAKlBH,EAAUG,EAAS,GALD,uBAOlBC,QAAQC,IAAI,kCAPM,gCAUpBL,EAAU5B,EAVU,yBAaUY,IAbV,eAahBQ,EAbgB,iBAcIA,EAAkBc,UAAUN,GAdhC,QAchBH,EAdgB,OAgBtBpB,EAAaoB,EAAYC,YAhBH,4CAAH,qDAmBfS,EAAwB,uCAAG,gCAAAtB,EAAA,yDACzBuB,EAAUC,IAAMC,QAAQ,oCAEzB1C,EAH0B,uBAI7ByC,IAAME,MAAM,+BAAgC,CAAEC,GAAIJ,IAJrB,0CAONxC,EAASiC,QAAQ,CAAEC,OAAQ,iBAPrB,OASL,KAFlBC,EAPuB,QAShBU,OACXJ,IAAME,MAAM,uBAAwB,CAAEC,GAAIJ,KAEpCR,EAAUG,EAAS,GACzB9B,EAAkB2B,GAElBS,IAAMK,QAAQ,kBAAoBd,EAAS,CAAEY,GAAIJ,IAEjDO,IACAnB,IACAG,KAnB2B,4CAAH,qDAwBxBiB,EAAa,uCAAG,8BAAA/B,EAAA,yDACduB,EAAUC,IAAMC,QAAQ,0BADV,SAIb1C,EAJa,uBAKhBoC,QAAQC,IAAI,iBALI,0CASKrC,EAASiC,QAAQ,CACtCC,OAAQ,wBAVQ,OASZC,EATY,OAalBM,IAAMK,QAAQ,0BAA2B,CAAEF,GAAIJ,IAC/CnC,EAAkB8B,EAAS,IAE3BY,IACAnB,IACAG,IAlBkB,qDAoBD,OAAb,KAAIkB,KApBU,wBAqBhBR,IAAME,MAAM,gCAAiC,CAAEC,GAAIJ,IArBnC,kCAwBhBJ,QAAQC,IAAI,qBAAZ,MACAI,IAAME,MAAM,qCAAsC,CAAEC,GAAIJ,IAzBxC,6EAAH,qDA+BbU,EAAmB,uCAAG,4BAAAjC,EAAA,sEACJjB,EAASiC,QAAQ,CAAEC,OAAQ,gBADvB,UAGV,QAHU,8BAIlBiB,EAAaV,IAAMC,QAAQ,gCAJT,SAMlB1C,EACHiC,QAAQ,CACPC,OAAQ,6BACRkB,OAAQ,CAAC,CAAEC,QAAS,UAErBC,MAAK,WAIJ,OAHAb,IAAMK,QAAQ,qCAAsC,CAClDF,GAAIO,IAEC,aAERI,OAAM,SAACC,GAIN,OAHAf,IAAME,MAAM,gCAAiC,CAAEC,GAAIO,IACnDf,QAAQO,MAAMa,GAEP,YArBa,gCAyBnB,qBAzBmB,2CAAH,qDA4BnBT,EAAkB,uCAAG,sBAAA9B,EAAA,kEAGX,WADAiC,IAFW,uBAIrBd,QAAQC,IAAI,iBAJS,8BAQnBrC,EARmB,iCASWgB,IATX,cAWHyC,GAAG,gBAAgB,SAACC,EAAMC,GAC1CvB,QAAQC,IAAIqB,EAAMC,EAAQ7B,YAC1BF,IACAG,OAGFK,QAAQC,IAAI,yBAjBS,wBAmBrBD,QAAQC,IAAI,kCAnBS,0DAsBvBD,QAAQC,IAAR,MAtBuB,0DAAH,qDA+CxB,IAAMuB,EAAoB,uCAAG,gCAAA3C,EAAA,yDACV,KAAbP,IAAkC,IAAfI,EADI,uBAEzB2B,IAAMoB,UACNpB,IAAME,MAAM,wCAHa,6BA1LJ,IAiMnBnC,EAPuB,uBAQzBiC,IAAMoB,UACNpB,IAAME,MAAM,6BATa,uCAcrB3C,EAdqB,kCAeLkD,IAfK,WAiBX,WAjBW,iEAqBjBV,EAAUC,IAAMC,QAAQ,eAAgB,CAC5CoB,SAAU,MAGZrB,IAAMC,QAAQ,sBAAuB,CACnCE,GAAIJ,EACJsB,SAAUC,MA3BW,UA8BS/C,IA9BT,eA8BjBQ,EA9BiB,OAgCvBY,QAAQC,IAAI,yCAhCW,UAiCJb,EAAkBwC,KAAK,EAAG,CAC3CC,MAAO9C,IAAO+C,MAAMC,WAAWzD,KAlCV,eAiCnB0D,EAjCmB,OAqCvB3B,IAAMC,QAAQ,gCAAiC,CAC7CE,GAAIJ,EACJsB,SAAUC,MAvCW,UAyCjBK,EAAOC,OAzCU,QA2CvB5B,IAAMK,QAAN,mEAC8D/C,EAD9D,YACkFO,EAAY,GAC5F,CAAEsC,GAAIJ,EAASsB,SAAU,MAG3Bf,IACAnB,IACAG,IAlDuB,+BAoDvBU,IAAME,MAAM,2BApDW,6EAwDzBF,IAAMoB,UAENpB,IAAME,MAAM,gBA1Da,0DAAH,qDAqG1B,OANA2B,qBAAU,WACR/B,IApHIvC,EACFA,EAASyD,GAAG,mBAAmB,SAACtB,GAC9B,GAAwB,IAApBA,EAASU,OACXJ,IAAME,MAAM,4BACP,CACL,IAAMX,EAAUG,EAAS,GACzB9B,EAAkB2B,GAElBS,IAAMK,QAAQ,kBAAoBd,GAElCe,IACAnB,IACAG,QAIJK,QAAQC,IAAI,mBAuGb,IAGD,qBAAKkC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,cAAC,IAAD,CACEC,SAAS,aACTC,aAAc,CACZC,MAAO,CACLC,WAAY,QACZC,MAAO,OACPC,SAAU,QACVC,UAAW,WAIjB,mBAAGP,UAAU,uBAAb,0BACA,mBAAGA,UAAU,WAAb,mEAGA,oBAAGA,UAAU,WAAb,UACGjE,EADH,IAnTe,OAsTf,qBACEyE,IAAG,UAjTb,wEAiTa,OAAuBzE,EAAc,GAArC,OAhTS,QAiTZ0E,IAAI,MACJT,UAAU,UAGZ,wBAEA,cAACU,EAAA,EAAD,CACEtC,MAAO7B,EACPmD,MAAOvD,EACPwE,SAvEgB,SAACC,IACzBxE,EAAYwE,EAAEC,OAAOnB,OAEjBrD,EAASyE,WACCzE,EAASyE,QACZC,SAASC,MAGhBxE,GAAc,GAFdA,GAAc,KAkEV6D,MAAM,UACNY,MAAM,qBACNC,QAAQ,WACR7E,SAAUA,EACV8E,WACU,OAAR9E,QAAQ,IAARA,GAAA,UAAAA,EAAUyE,eAAV,SAAmBM,kBACf,qEACA,GAENC,WAAY,CAAEC,UAAW,UAAWC,QAAS,sBAE3B,KAAnB1F,EApEP,wBACE2F,QAAS/C,EACTuB,UAAU,mCAFZ,+BASA,wBACEwB,QAASnC,EACTW,UAAU,mCAFZ,sBA+DM,oBAAGA,UAAU,WAAb,2BACiB/D,EADjB,OACgCA,EAAY,EAAI,IAAM,GADtD,OAGA,oBAAG+D,UAAU,WAAb,gCAnViB,EAmVjB,eAIF,qBAAKA,UAAU,mBAAf,SACE,oBACEA,UAAU,cACVyB,KA7VQ,wBA8VRZ,OAAO,SACPa,IAAI,aAJN,uBAMa,IACX,qBAAKjB,IAAI,WAAWT,UAAU,WAAWQ,IAjW9B,+DCJvBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9574b963.chunk.js","sourcesContent":["import \"./styles/App.css\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport TextField from \"@mui/material/TextField\";\n\n// Constants\nconst TEAM_SITE_LINK = `https://nfourtwo.com/`;\nconst TEAM_LOGO_LINK = \"https://nfourtwo.com/_nuxt/img/logo.44c88d0.png\";\nconst TOTAL_MINT_COUNT = 1000;\nconst USER_MAX_NFT_COUNT = 3;\n\nconst CONTRACT_ADDRESS = \"0x0e3D219Caf29779aD05e4416b2A2Cda0f00716aB\";\n\nconst IPFS_PREFIX_URL =\n  \"https://ipfs.io/ipfs/QmZ7idFYQMPwZcwvcii2YKUxV9xTze3gsuM58Kp6Sc9up8/\";\nconst IPFS_SUFFIX_URL = \".png\";\n\nconst { ethereum } = window;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [totalSupply, setTotalSupply] = useState(0);\n  const [youMinted, setYouMinted] = useState(0);\n  const [msgValue, setMsgValue] = useState(\"\");\n  const inputRef = useRef(null);\n  const [inputError, setInputError] = useState(false);\n\n  const connectToContract = async () => {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicNft.abi,\n      signer\n    );\n\n    return connectedContract;\n  };\n\n  const updateTotalSupply = async () => {\n    const connectedContract = await connectToContract();\n    const mintedSoFar = await connectedContract.totalSupply();\n\n    setTotalSupply(mintedSoFar.toNumber());\n  };\n\n  const updateYouMinted = async () => {\n    let account = \"\";\n    if (currentAccount === \"\") {\n      if (ethereum) {\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n        account = accounts[0];\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } else {\n      account = currentAccount;\n    }\n\n    const connectedContract = await connectToContract();\n    const mintedSoFar = await connectedContract.balanceOf(account);\n\n    setYouMinted(mintedSoFar.toNumber());\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const toastId = toast.loading(\"Checking for connected wallet...\");\n\n    if (!ethereum) {\n      toast.error(\"Make sure you have metamask!\", { id: toastId });\n      return;\n    } else {\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n      if (accounts.length === 0) {\n        toast.error(\"No account connected\", { id: toastId });\n      } else {\n        const account = accounts[0];\n        setCurrentAccount(account);\n\n        toast.success(\"Connected with \" + account, { id: toastId });\n\n        setupEventListener();\n        updateTotalSupply();\n        updateYouMinted();\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    const toastId = toast.loading(\"Connecting to wallet..\");\n\n    try {\n      if (!ethereum) {\n        console.log(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      toast.success(\"Successfully connected!\", { id: toastId });\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener();\n      updateTotalSupply();\n      updateYouMinted();\n    } catch (err) {\n      if (err.code === 4001) {\n        toast.error(\"User rejected the connection!\", { id: toastId });\n        return;\n      } else {\n        console.log(\"An error occured -\", err);\n        toast.error(\"An error occured while connecting!\", { id: toastId });\n        return;\n      }\n    }\n  };\n\n  const checkAndSwitchChain = async () => {\n    const chainId = await ethereum.request({ method: \"eth_chainId\" });\n\n    if (chainId !== \"0x4\") {\n      const chainToast = toast.loading(\"Please connect to rinkeby...\");\n\n      await ethereum\n        .request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: \"0x4\" }],\n        })\n        .then(() => {\n          toast.success(\"Successfully connected to rinkeby!\", {\n            id: chainToast,\n          });\n          return \"success\";\n        })\n        .catch((err) => {\n          toast.error(\"Failed to connect to rinkeby!\", { id: chainToast });\n          console.error(err);\n\n          return \"failed\";\n        });\n    }\n\n    return \"already connected\";\n  };\n\n  const setupEventListener = async () => {\n    try {\n      const res = checkAndSwitchChain();\n      if (res === \"failed\") {\n        console.log(\"error happend\");\n        return;\n      }\n\n      if (ethereum) {\n        const connectedContract = await connectToContract();\n\n        connectedContract.on(\"NewNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          updateTotalSupply();\n          updateYouMinted();\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  function addWalletListener() {\n    if (ethereum) {\n      ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length === 0) {\n          toast.error(\"No account connected\");\n        } else {\n          const account = accounts[0];\n          setCurrentAccount(account);\n\n          toast.success(\"Connected with \" + account);\n\n          setupEventListener();\n          updateTotalSupply();\n          updateYouMinted();\n        }\n      });\n    } else {\n      console.log(\"Get MetaMask!\");\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    if (msgValue === \"\" || inputError === true) {\n      toast.dismiss();\n      toast.error(\"Please Enter Number, in support >= 0\");\n      return;\n    }\n\n    if (youMinted === USER_MAX_NFT_COUNT) {\n      toast.dismiss();\n      toast.error(\"You can only mint 3 NFTs.\");\n      return;\n    }\n\n    try {\n      if (ethereum) {\n        const res = await checkAndSwitchChain();\n\n        if (res === \"failed\") {\n          return;\n        }\n\n        const toastId = toast.loading(\"setting up..\", {\n          duration: 2000,\n        });\n\n        toast.loading(\"Minting your NFT...\", {\n          id: toastId,\n          duration: Infinity,\n        });\n\n        const connectedContract = await connectToContract();\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mint(1, {\n          value: ethers.utils.parseEther(msgValue),\n        });\n\n        toast.loading(\"Transaction is being mined...\", {\n          id: toastId,\n          duration: Infinity,\n        });\n        await nftTxn.wait();\n\n        toast.success(\n          `Mined successfully! : https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${totalSupply+1}`,\n          { id: toastId, duration: 3000 }\n        );\n\n        setupEventListener();\n        updateTotalSupply();\n        updateYouMinted();\n      } else {\n        toast.error(\"Please install Metamask\");\n        return;\n      }\n    } catch (err) {\n      toast.dismiss();\n\n      toast.error(\"Didn't mint.\");\n      // console.log(err);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setMsgValue(e.target.value);\n\n    if (inputRef.current) {\n      const ref = inputRef.current;\n      if (!ref.validity.valid) {\n        setInputError(true);\n      } else {\n        setInputError(false);\n      }\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Mint NFT\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    addWalletListener();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <Toaster\n            position=\"top-center\"\n            toastOptions={{\n              style: {\n                background: \"black\",\n                color: \"#fff\",\n                maxWidth: \"800px\",\n                textAlign: \"left\",\n              },\n            }}\n          />\n          <p className=\"header gradient-text\">ARMC kitsune</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          <p className=\"sub-text\">\n            {totalSupply}/{TOTAL_MINT_COUNT}\n          </p>\n          <img\n            src={`${IPFS_PREFIX_URL}${totalSupply + 1}${IPFS_SUFFIX_URL}`}\n            alt=\"NFT\"\n            className=\"photo\"\n          />\n\n          <div></div>\n\n          <TextField\n            error={inputError}\n            value={msgValue}\n            onChange={handleInputChange}\n            color=\"success\"\n            label=\"support >= 0 (ETH)\"\n            variant=\"standard\"\n            inputRef={inputRef}\n            helperText={\n              inputRef?.current?.validationMessage\n                ? \"数値を入力してください\"\n                : \"\"\n            }\n            inputProps={{ inputMode: \"numeric\", pattern: \"\\\\d+(?:\\\\.\\\\d+)?\" }}\n          />\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n\n          <p className=\"sub-text\">\n            You've minted {youMinted} NFT{youMinted > 1 ? \"s\" : \"\"}.\n          </p>\n          <p className=\"sub-text\">\n            You can mint up to {USER_MAX_NFT_COUNT} NFTs.\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TEAM_SITE_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            powered by{\" \"}\n            <img alt=\"n42 Logo\" className=\"n42-logo\" src={TEAM_LOGO_LINK} />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}